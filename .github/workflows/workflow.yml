name: test-workflow1

on:
  push:
  pull_request: 

jobs:
  sample-job0:  
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     container: [1,2,3,4,5,6,7,8,9]
    steps:
      - run: echo "CHROME_VERSION=$(google-chrome --product-version)" >> $GITHUB_ENV
      - run: ${{contains(env.CHROME_VERSION, '104'}}
      # - name: Checkout
      #   uses: actions/checkout@v3
        
      # - uses: actions/cache@v3
      #   id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      # - name: Cache Cypress binary
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.cache/Cypress
      #     key: cypress-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      
      # - run: npm install 
      
      # - run: echo "CHROME_VERSION=$(google-chrome --product-version) >> $GITHUB_ENV"
      
      # - if: contains(env.CHROME_VERSION, '104') == false  
      #   uses: esudaley/setup-browser@main
      #   with:
      #     browser: chrome
      #     version: latest
      

  # get-job:
  #   if: always()
  #   needs: [sample-job]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/github-script@v6
  #       id: failed-job
  #       with:
  #         script: |
  #            const results = await github.rest.actions.listJobsForWorkflowRun({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               run_id: context.runId
  #               });
  #             results.data.jobs.forEach(job => {
  #               if (job.conclusion === 'failure'){
  #                 console.log(job.name)
  #                 return job.name
  #               }
  #             })
  # test-api: 
  #   runs-on: ubuntu-latest
  #   steps:
  #   - run: exit 1

  # slack-notify:
  #   # if: failure() && (contains(['main', 'test-branch'], github.ref_name) || contains(['main', 'test-branch', github.base_ref)]))
  #   if: failure() && (contains(fromJSON('["main", "test-branch"]'), github.ref_name) || contains(fromJSON('["main", "test-branch"]'), github.base_ref))
  #   runs-on: ubuntu-latest
  #   needs: [sample-job]
  #   steps:
  #     - name: Get failed job 
  #       uses: actions/github-script@v6
  #       id: failed-job
  #       with:
  #         result-encoding: string
  #         script: |
  #            const results = await github.rest.actions.listJobsForWorkflowRun({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               run_id: context.runId
  #               });
  #             for (let job of results.data.jobs){
  #               if (job.conclusion === 'failure'){
  #                   return job.name
  #               }
  #             }
  #     - run: echo ${{steps.failed-job.outputs.result}}
  #     - name: action-slack
  #       uses: 8398a7/action-slack@v3.12.0
  #       with:
  #         mention: ${{fromJSON(env.users)[github.actor]}} 
  #         if_mention: always
  #         text: "Check Github Actions"
  #         author_name: ${{github.job}}
  #         status: failure
  #         job_name: ${{steps.failed-job.outputs.result}}
  #         fields: commit, message, job, ref
          
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #         users: '{"esudaley":"U03SG9FGYHK"}'
